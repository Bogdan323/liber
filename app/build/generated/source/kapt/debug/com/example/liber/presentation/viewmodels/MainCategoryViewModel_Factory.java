// Generated by Dagger (https://dagger.dev).
package com.example.liber.presentation.viewmodels;

import com.example.liber.domain.usecase.GetAllGamesUseCase;
import com.example.liber.presentation.fragments.maincontent.homefragment.categories.maincategoryfragment.MainCategoryViewModel;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainCategoryViewModel_Factory implements Factory<MainCategoryViewModel> {
  private final Provider<GetAllGamesUseCase> getAllGamesUseCaseProvider;

  public MainCategoryViewModel_Factory(Provider<GetAllGamesUseCase> getAllGamesUseCaseProvider) {
    this.getAllGamesUseCaseProvider = getAllGamesUseCaseProvider;
  }

  @Override
  public MainCategoryViewModel get() {
    return newInstance(getAllGamesUseCaseProvider.get());
  }

  public static MainCategoryViewModel_Factory create(
      Provider<GetAllGamesUseCase> getAllGamesUseCaseProvider) {
    return new MainCategoryViewModel_Factory(getAllGamesUseCaseProvider);
  }

  public static MainCategoryViewModel newInstance(GetAllGamesUseCase getAllGamesUseCase) {
    return new MainCategoryViewModel(getAllGamesUseCase);
  }
}
